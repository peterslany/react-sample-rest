{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/About.tsx","components/Contact.tsx","redux/ActionTypes.ts","redux/ActionCreators.ts","components/Article.tsx","components/News.tsx","App.tsx","serviceWorker.ts","redux/reducers/articles.ts","index.tsx","redux/configureStore.ts"],"names":["Header","props","useState","colorTheme","isSwitchOn","state","setState","className","theme","mode","Item","key","HomeOutlined","to","InfoCircleOutlined","ContactsOutlined","NotificationOutlined","checkedChildren","unCheckedChildren","checked","onClick","toggleSwitch","Home","About","Contact","ActionTypes","articlesLoadingSucces","response","type","success","payload","articlesLoadingError","error","articlesAreLoading","query","isLoading","Title","Typography","Paragraph","Article","cardInfo","loading","hoverable","bordered","window","open","data","webUrl","level","webTitle","sectionName","date","d","Date","getDate","getMonth","getFullYear","parseDate","webPublicationDate","sm","md","lg","xl","News","renderArticles","articles","searchedWord","LoadingOutlined","Array","map","articlesArray","length","article","id","page","componentDidMount","fetchArticles","this","Search","placeholder","onSearch","value","enterButton","showSizeChanger","defaultCurrent","current","total","totalPages","onChange","React","Component","connect","dispatch","a","fetch","then","ok","console","log","Error","json","newPayld","catch","RenderWithWhiteBG","children","withRouter","Content","path","component","Footer","style","textAlign","Boolean","location","hostname","match","Articles","currentPage","action","JSON","stringify","results","pages","ReactDOM","render","StrictMode","store","createStore","combineReducers","applyMiddleware","thunk","logger","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5c127c1a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Menu, Switch } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport {\n  HomeOutlined,\n  ContactsOutlined,\n  InfoCircleOutlined,\n  NotificationOutlined,\n} from \"@ant-design/icons\";\n\ninterface State {\n  colorTheme: \"light\" | \"dark\";\n  isSwitchOn: boolean;\n}\n\ninterface HeaderProps {\n}\nconst toggleSwitch = (state: any, setState: any) => {\n  setState({\n    isSwitchOn: !state.isSwitchOn,\n    colorTheme: state.isSwitchOn ? \"light\" : \"dark\",\n  });\n};\n\nexport const Header: React.FC<HeaderProps> = (props : HeaderProps) => {\n  const [state, setState] = useState<State>({\n    colorTheme: \"light\",\n    isSwitchOn: false,\n  });\n  return (\n    <div className=\"header-fixed\">\n      <Menu\n        theme={state.colorTheme}\n        mode=\"horizontal\"\n      >\n        <Menu.Item key=\"1\">\n          <HomeOutlined />\n          <Link to=\"/home\">Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <InfoCircleOutlined />\n          <Link to=\"/about\">About me</Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n          <ContactsOutlined />\n          <Link to=\"/contact\">Contact</Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n          <NotificationOutlined />\n          <Link to=\"/news\">News</Link>\n        </Menu.Item>\n        <Switch\n        className=\"dark-mode-switch\"\n          checkedChildren=\"Dark Mode\"\n          unCheckedChildren=\"Dark Mode\"\n          checked={state.isSwitchOn}\n          onClick={() => toggleSwitch(state, setState)}\n        ></Switch>\n      </Menu>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport function Home(props : any) {\n    return (\n        <h1>Welcome to my webpage!</h1>\n    );\n}","import React from 'react'\nimport { Divider } from 'antd';\nexport default function About() {\n    return (\n        <div>\n            <h1>Who am I?</h1>\n            <Divider />\n            <p>\n                My name is Peter Slany, I am front end React developer and creative thinker.\n            </p>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Contact() {\n    return (\n        <div>\n            Mail: peter @ slany . com\n        </div>\n    )\n}\n","export enum ActionTypes {\n    isLoading,\n    success,\n    error\n}","import { ActionTypes } from \"./ActionTypes\";\n\nexport const fetchArticles = (query: string, page: number) => async (\n  dispatch: any\n) => {\n  dispatch(articlesAreLoading(query));\n  await fetch(\"http://localhost:3030/articles?q=\" + query + \"&page=\" + page)\n    .then(async (response) => {\n      if (!response.ok) {\n        dispatch(articlesLoadingError());\n        console.log(new Error(\"Invalid response from server!\"));\n      } else {\n        const newPayld = await response.json();\n        return newPayld;\n      }\n    })\n    .then((payload) => {\n      dispatch(articlesLoadingSucces(payload));\n    })\n    .catch((error) => {\n      dispatch(articlesLoadingError());\n      console.log(error);\n    });\n};\n\nexport const articlesLoadingSucces = (response) => ({\n  type: ActionTypes.success,\n  payload: response,\n});\n\nexport const articlesLoadingError = () => ({\n  type: ActionTypes.error,\n});\nexport const articlesAreLoading = (query) => ({\n  type: ActionTypes.isLoading,\n  payload: query,\n});\n","import React from \"react\";\nimport { Col, Card, Typography, Divider } from \"antd\";\n\nconst { Paragraph, Title } = Typography;\n\nconst parseDate = (date) => {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  const d = new Date (date);\n  return d.getDate() + \" \" + months[d.getMonth()] + \", \" + d.getFullYear();\n}\n\nexport default function Article(props) {\n  const cardInfo = props.loading ? (\n    <Card className=\"article--card\" loading></Card>\n  ) : (\n    <Card\n      className=\"article--card\"\n      hoverable\n      bordered={false}\n      onClick={() => window.open(props.data.webUrl)}\n    >\n      <Title level={4}>{props.data.webTitle}</Title>\n      <Divider />\n      {props.data.sectionName} <Divider type=\"vertical\" /> {parseDate(props.data.webPublicationDate)}\n    </Card>\n  );\n\n  return (\n    <Col className=\"article\" sm={24} md={12} lg={8} xl={6}>\n      {cardInfo}\n    </Col>\n  );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchArticles } from \"../redux/ActionCreators\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { Row, Typography, Input, Col, Pagination } from \"antd\";\nimport Article from \"./Article\";\nconst mapStateToProps = (state) => ({\n  articles: state.articles,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchArticles: (query, page) => dispatch(fetchArticles(query, page)),\n});\n\nexport interface NewsProps {\n  articles?: any;\n  fetchArticles?;\n}\n\nexport interface NewsState {\n  query: string;\n  page: number;\n}\n\nclass News extends React.Component<NewsProps, NewsState> {\n  renderArticles = () => {\n    if (this.props.articles.isLoading) {\n      return (\n        <>\n          <div className=\"loading-content\">\n            <div className=\"loading-text\">\n            Loading results for: {this.props.articles.searchedWord}{\" \"}\n            <LoadingOutlined />\n            </div>\n          </div>\n\n          <Row>\n            {[...Array(12)].map((key) => (\n              <Article key={key} data={null} loading={true} />\n            ))}\n          </Row>\n        </>\n      );\n    }\n\n    const articles =\n      this.props.articles.articlesArray.length > 0 ? (\n        <Row>\n          {this.props.articles.articlesArray.map((article) => (\n            <Article key={article.id} data={article} loading={false} />\n          ))}\n        </Row>\n      ) : (\n        <Typography.Paragraph className=\"news--header\">\n          None articles about {this.props.articles.searchedWord} were found :(\n        </Typography.Paragraph>\n      );\n    return (\n      <>\n        \n        {articles}\n        \n      </>\n    );\n  };\n\n  state = { query: \"Slovakia\", page: 1 };\n  render() {\n    return <>\n    <Row>\n          <Col className=\"news--header\" sm={23} md={11}>\n            <Typography.Title level={4}>\n              Showing results for: {this.props.articles.searchedWord}\n            </Typography.Title>\n          </Col>\n          <Col className=\"news--header\" sm={23} md={11}>\n            <Input.Search\n              loading={this.props.articles.isLoading}\n              placeholder=\"Search articles\"\n              onSearch={(value) =>\n                value\n                  ? [\n                      this.setState({ query: value }),\n                      this.props.fetchArticles(value, 1),\n                    ]\n                  : null\n              }\n              enterButton\n            />\n          </Col>\n        </Row>\n    {this.renderArticles()}\n    <Pagination\n        className=\"page-selector\"\n        showSizeChanger={false}\n        defaultCurrent={1}\n          current={this.state.page}\n          total={this.props.articles.totalPages}\n          onChange={value => {this.setState({page: value}); this.props.fetchArticles(this.state.query, value)}}\n        /></>;\n  }\n  componentDidMount = () => {\n    this.props.fetchArticles(this.state.query, this.state.page);\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(News);\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { Home } from \"./components/Home\";\nimport { Layout, Card } from \"antd\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport News from \"./components/News\";\n\n\nconst RenderWithWhiteBG = (props) => {\n  return <Card className=\"site-layout-content\">{props.children}</Card>;\n};\n\nfunction App(props) {\n  return (\n    <Layout className=\"layout\">\n      <Header />\n      <Layout.Content className=\"layout-content-main\">\n        <Switch>\n          <Route\n            path=\"/home\"\n            component={() => (\n              <RenderWithWhiteBG>\n                <Home />\n              </RenderWithWhiteBG>\n            )}\n          />\n          <Route\n            path=\"/about\"\n            component={() => (\n              <RenderWithWhiteBG>\n                <About />\n              </RenderWithWhiteBG>\n            )}\n          />\n          <Route\n            path=\"/contact\"\n            component={() => (\n              <RenderWithWhiteBG>\n                <Contact />\n              </RenderWithWhiteBG>\n            )}\n          />\n          <Route path=\"/news\" component={News} />\n          <Redirect to=\"/home\" />\n        </Switch>\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: \"center\" }}>\n        ©2020 Peter Slany\n      </Layout.Footer>\n    </Layout>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionTypes } from \"../ActionTypes\";\n\nexport const Articles = (\n  state = {\n    error: false,\n    isLoading: true,\n    searchedWord: \"Slovakia\",\n    articlesArray: null,\n    currentPage: 0,\n    totalPages: 0,\n  },\n  action: any\n) => {\n  console.log(JSON.stringify(action));\n  switch (action.type) {\n    case ActionTypes.isLoading:\n      return { ...state, isLoading: true, searchedWord: action.payload };\n    case ActionTypes.success:\n      return {\n        ...state,\n        articlesArray: action.payload.response.results,\n        isLoading: false,\n        currentPage: action.payload.response.currentPage,\n        totalPages: action.payload.response.pages\n      };\n    case ActionTypes.error:\n      return { ...state, error: true };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConfigureStore } from \"./redux/configureStore\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ConfigureStore()}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk  from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { Articles } from './reducers/articles';\n\nexport const ConfigureStore = () => {\n    const store = createStore( // kombinovanie roznych reducers do jedneho store\n        combineReducers({\n            articles: Articles,\n        }),\n        applyMiddleware(thunk, logger)\n    );\n    \n    return store;\n}"],"sourceRoot":""}